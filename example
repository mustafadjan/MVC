#include <iostream>
#include <string>
#include <vector>
#include <algorithm> // For std::find

// --- Model ---
class Subject {
public:
    virtual void attach(class Observer* observer) = 0;
    virtual void detach(class Observer* observer) = 0;
    virtual void notify() = 0;
};

class Observer {
public:
    virtual void update() = 0;
};

class DataModel : public Subject {
private:
    std::string data;
    std::vector<Observer*> observers;

public:
    DataModel(const std::string& initialData) : data(initialData) {}

    void setData(const std::string& newData) {
        data = newData;
        notify(); // Notify observers when data changes
    }

    std::string getData() const {
        return data;
    }

    void attach(Observer* observer) override {
        observers.push_back(observer);
    }

    void detach(Observer* observer) override {
        observers.erase(std::remove(observers.begin(), observers.end(), observer), observers.end());
    }

    void notify() override {
        for (Observer* obs : observers) {
            obs->update();
        }
    }
};

// --- View ---
class ConsoleView : public Observer {
private:
    DataModel* model;

public:
    ConsoleView(DataModel* m) : model(m) {
        model->attach(this); // Attach to the model to receive updates
    }

    void update() override {
        displayData(); // Update the view when the model changes
    }

    void displayData() const {
        std::cout << "View: Current data is: " << model->getData() << std::endl;
    }
};

// --- Controller ---
class DataController {
private:
    DataModel* model;

public:
    DataController(DataModel* m) : model(m) {}

    void updateData(const std::string& newData) {
        model->setData(newData); // Controller updates the model
    }
};

// --- Main Application ---
int main() {
    // Create Model, View, and Controller instances
    DataModel model("Initial Data");
    ConsoleView view(&model);
    DataController controller(&model);

    // Initial display
    view.displayData();

    // User interaction (simulated by controller calls)
    controller.updateData("New Data from Controller");

    controller.updateData("Another Update");

    return 0;
}
